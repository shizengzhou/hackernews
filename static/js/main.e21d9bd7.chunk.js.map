{"version":3,"sources":["constants/index.js","components/Button/index.js","components/Search/index.js","components/Table/index.js","components/Loading/index.js","components/App/index.js","serviceWorker.js","index.jsx"],"names":["DEFAULT_QUERY","SORTS","NONE","list","TITLE","sortBy","AUTHOR","COMMENTS","reverse","POINTS","Button","_ref","onClick","className","children","react_default","a","createElement","type","defaultProps","Search","this","input","focus","_this","_this$props","props","value","onChange","onSubmit","ref","el","Component","Sort","sortKey","onSort","activeSortKey","sortClass","classNames","button-active","components_Button","Table","Object","classCallCheck","possibleConstructorReturn","getPrototypeOf","call","state","isSortReverse","bind","assertThisInitialized","setState","onDismiss","_this$state","sortedList","reverseSortedList","style","width","Table_Sort","map","item","key","objectID","href","url","title","author","num_comments","points","library","add","faSpinner","Loading","react_fontawesome_index_es","icon","App","_isMounted","results","searchKey","searchTerm","error","isLoading","needsToSearchTopStories","setSearchTopStories","fetchSearchTopStories","onSearchChange","onSearchSubmit","result","hits","page","prevState","oldHits","updateHits","toConsumableArray","concat","objectSpread","defineProperty","updateSearchTopStoriesState","_this2","arguments","length","undefined","axios","then","data","catch","id","_results$searchKey","updatedHits","filter","event","target","preventDefault","_this3","_this$state2","components_Search","src_components_Loading","Table_Table","Boolean","window","location","hostname","match","ReactDOM","render","src_components_App","document","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"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","file":"static/js/main.e21d9bd7.chunk.js","sourcesContent":["import { sortBy } from 'lodash';\n\nexport const DEFAULT_QUERY = '';\nexport const DEFAULT_HPP = '30';\nexport const PATH_BASE = 'https://hn.algolia.com/api/v1';\nexport const PATH_SEARCH = '/search';\nexport const PARAM_SEARCH = 'query=';\nexport const PARAM_PAGE = 'page=';\nexport const PARAM_HPP = 'hitsPerPage=';\nexport const SORTS = {\n  NONE: list => list,\n  TITLE: list => sortBy(list, 'title'),\n  AUTHOR: list => sortBy(list, 'author'),\n  COMMENTS: list => sortBy(list, 'num_comments').reverse(),\n  POINTS: list => sortBy(list, 'points').reverse()\n};","import React from 'react';\nimport PropTypes from 'prop-types';\n\nconst Button = ({ onClick, className, children }) => (\n  <button\n    type=\"button\"\n    className={className}\n    onClick={onClick}\n  >\n    {children}\n  </button>\n);\n\nButton.propTypes = {\n  onClick: PropTypes.func.isRequired,\n  className: PropTypes.string,\n  children: PropTypes.node.isRequired\n};\n\nButton.defaultProps = {\n  className: ''\n};\n\nexport default Button;","import React, { Component } from 'react';\nimport PropTypes from 'prop-types';\n\nclass Search extends Component {\n  componentDidMount() {\n    if (this.input) {\n      this.input.focus();\n    }\n  }\n\n  render() {\n    const {\n      value,\n      onChange,\n      onSubmit,\n      children\n    } = this.props;\n\n    return (\n      <form onSubmit={onSubmit}>\n        <input\n          type=\"text\"\n          value={value}\n          onChange={onChange}\n          ref={el => this.input = el}\n        />\n        <button type=\"submit\">\n          {children}\n        </button>\n      </form>\n    );\n  }\n}\n\nSearch.propTypes = {\n  value: PropTypes.string.isRequired,\n  onChange: PropTypes.func.isRequired,\n  onSubmit: PropTypes.func.isRequired,\n  children: PropTypes.node.isRequired\n};\n\nexport default Search;","import React, { Component } from 'react';\nimport Button from '../Button';\nimport PropTypes from 'prop-types';\nimport { SORTS } from './../../constants';\nimport classNames from 'classnames';\n\nconst Sort = ({ sortKey, onSort, activeSortKey, children }) => {\n  const sortClass = classNames(\n    'button-inline',\n    { 'button-active': sortKey === activeSortKey }\n  );\n\n  return (\n    <Button\n      className={sortClass}\n      onClick={() => onSort(sortKey)}\n    >\n      {children}\n    </Button>\n  );\n};\n\nexport default class Table extends Component {\n  constructor(props) {\n    super(props);\n\n    this.state = {\n      sortKey: 'NONE',\n      isSortReverse: false\n    };\n\n    this.onSort = this.onSort.bind(this);\n  }\n\n  onSort(sortKey) {\n    const isSortReverse = this.state.sortKey === sortKey &&\n      !this.state.isSortReverse;\n\n    this.setState({\n      sortKey,\n      isSortReverse\n    });\n  }\n\n  render() {\n    const { list, onDismiss } = this.props;\n    const { sortKey, isSortReverse } = this.state;\n    const sortedList = SORTS[sortKey](list);\n    const reverseSortedList = isSortReverse ?\n      sortedList.reverse() :\n      sortedList;\n\n    return (\n      <div className=\"table\">\n        <div className=\"table-header\">\n          <span style={{ width: '40%' }}>\n            <Sort\n              sortKey={'TITLE'}\n              onSort={this.onSort}\n              activeSortKey={sortKey}\n            >\n              Titel\n            </Sort>\n          </span>\n          <span style={{ width: '30%' }}>\n            <Sort\n              sortKey={'AUTHOR'}\n              onSort={this.onSort}\n              activeSortKey={sortKey}\n            >\n              Author\n            </Sort>\n          </span>\n          <span style={{ width: '10%' }}>\n            <Sort\n              sortKey={'COMMENTS'}\n              onSort={this.onSort}\n              activeSortKey={sortKey}\n            >\n              Comments\n            </Sort>\n          </span>\n          <span style={{ width: '10%' }}>\n            <Sort\n              sortKey={'POINTS'}\n              onSort={this.onSort}\n              activeSortKey={sortKey}\n            >\n              Points\n            </Sort>\n          </span>\n          <span style={{ width: '10%' }}>\n            Archive\n          </span>\n        </div>\n        {reverseSortedList.map(item => (\n          <div className=\"table-row\" key={item.objectID}>\n            <span style={{ width: '40%' }}>\n              <a href={item.url} title={item.title}>{item.title}</a>\n            </span>\n            <span style={{ width: '30%' }}>{item.author}</span>\n            <span style={{ width: '10%' }}>{item.num_comments}</span>\n            <span style={{ width: '10%' }}>{item.points}</span>\n            <span style={{ width: '10%' }}>\n              <Button\n                className=\"button-inline\"\n                onClick={() => onDismiss(item.objectID)}\n              >\n                Dismiss\n              </Button>\n            </span>\n          </div>\n        ))}\n      </div>\n    );\n  }\n}\n\nTable.propTypes = {\n  list: PropTypes.arrayOf(\n    PropTypes.shape({\n      objectID: PropTypes.string.isRequired,\n      author: PropTypes.string,\n      url: PropTypes.string,\n      title: PropTypes.string,\n      num_comments: PropTypes.number,\n      points: PropTypes.number\n    })\n  ).isRequired,\n  onDismiss: PropTypes.func.isRequired\n};\n","import React from 'react';\nimport { library } from '@fortawesome/fontawesome-svg-core';\nimport { faSpinner } from '@fortawesome/free-solid-svg-icons';\nimport { FontAwesomeIcon } from '@fortawesome/react-fontawesome';\nimport './index.css';\n\nlibrary.add(faSpinner);\n\nconst Loading = () => (\n  <div className=\"spin-container\">\n    <FontAwesomeIcon className=\"spin fa-spin fa-3x\" icon=\"spinner\" />\n  </div>\n);\n\nexport default Loading;","import React, { Component } from 'react';\nimport axios from 'axios';\nimport './index.css';\nimport {\n  DEFAULT_QUERY,\n  DEFAULT_HPP,\n  PATH_BASE,\n  PATH_SEARCH,\n  PARAM_SEARCH,\n  PARAM_PAGE,\n  PARAM_HPP\n} from '../../constants';\nimport Button from '../Button';\nimport Search from '../Search';\nimport Table from '../Table';\nimport Loading from '../Loading';\n\nconst updateSearchTopStoriesState = (hits, page) => prevState => {\n  const { searchKey, results } = prevState;\n\n  const oldHits = results && results[searchKey] ?\n    results[searchKey].hits :\n    [];\n\n  const updateHits = [\n    ...oldHits,\n    ...hits\n  ];\n\n  return {\n    results: {\n      ...results,\n      [searchKey]: { hits: updateHits, page }\n    },\n    isLoading: false\n  };\n}\n\nclass App extends Component {\n  _isMounted = false;\n\n  constructor(props) {\n    super(props);\n    this.state = {\n      results: null,\n      searchKey: '',\n      searchTerm: DEFAULT_QUERY,\n      error: null,\n      isLoading: false,\n    };\n\n    this.needsToSearchTopStories = this.needsToSearchTopStories.bind(this);\n    this.setSearchTopStories = this.setSearchTopStories.bind(this);\n    this.fetchSearchTopStories = this.fetchSearchTopStories.bind(this);\n    this.onDismiss = this.onDismiss.bind(this);\n    this.onSearchChange = this.onSearchChange.bind(this);\n    this.onSearchSubmit = this.onSearchSubmit.bind(this);\n  }\n\n  setSearchTopStories(result) {\n    const { hits, page } = result;\n\n    this.setState(updateSearchTopStoriesState(hits, page));\n  }\n\n  fetchSearchTopStories(searchTerm, page = 0) {\n    this.setState({\n      isLoading: true\n    });\n\n    axios(\n      `${PATH_BASE}${PATH_SEARCH}?${PARAM_SEARCH}${searchTerm}&${PARAM_PAGE}${page}&${PARAM_HPP}${DEFAULT_HPP}`\n    )\n      .then(result => this._isMounted && this.setSearchTopStories(result.data))\n      .catch(error => this._isMounted && this.setState({ error }));\n  }\n\n  componentDidMount() {\n    this._isMounted = true;\n    const { searchTerm } = this.state;\n    this.setState({\n      searchKey: searchTerm\n    });\n    this.fetchSearchTopStories(searchTerm);\n  }\n\n  componentWillUnmount() {\n    this._isMounted = false;\n  }\n\n  onDismiss(id) {\n    const { searchKey, results } = this.state;\n    const { hits, page } = results[searchKey];\n    const updatedHits = hits.filter(\n      item => item.objectID !== id\n    );\n\n    this.setState({\n      results: {\n        ...results,\n        [searchKey]: { hits: updatedHits, page }\n      }\n    });\n  }\n\n  onSearchChange(event) {\n    this.setState({\n      searchTerm: event.target.value\n    });\n  }\n\n  needsToSearchTopStories(searchTerm) {\n    return !this.state.results[searchTerm];\n  }\n\n  onSearchSubmit(event) {\n    const { searchTerm } = this.state;\n    this.setState({\n      searchKey: searchTerm\n    });\n\n    if (this.needsToSearchTopStories(searchTerm)) {\n      this.fetchSearchTopStories(searchTerm);\n    }\n\n    event.preventDefault();\n  }\n\n  render() {\n    const {\n      results,\n      searchTerm,\n      searchKey,\n      error,\n      isLoading\n    } = this.state;\n    const page = (results &&\n      results[searchKey] &&\n      results[searchKey].page\n    ) || 0;\n    const list = (results &&\n      results[searchKey] &&\n      results[searchKey].hits\n    ) || [];\n\n    return (\n      <div className=\"page\">\n        <div className=\"interactions\">\n          <Search\n            value={searchTerm}\n            onChange={this.onSearchChange}\n            onSubmit={this.onSearchSubmit}\n          >\n            Search\n          </Search>\n        </div>\n        {isLoading ? <Loading /> : ''}\n        {error ?\n          <div className=\"interactions\">\n            <p>Something went wrong.</p>\n          </div> :\n          <Table\n            list={list}\n            onDismiss={this.onDismiss}\n          />\n        }\n        <div className=\"interactions\">\n          <Button\n            onClick={() => this.fetchSearchTopStories(searchKey, page + 1)}\n          >\n            More\n          </Button>\n        </div>\n      </div>\n    );\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read http://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit http://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See http://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './components/App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: http://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}